<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Polly-foz&#39;s Blog</title>
    <link>http://yangpeiya.xyz/posts/</link>
    <description>Recent content in Posts on Polly-foz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 03 Jan 2020 14:20:43 +0800</lastBuildDate>
    
	<atom:link href="http://yangpeiya.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>http://yangpeiya.xyz/js-function-exec-time/</link>
      <pubDate>Fri, 03 Jan 2020 14:20:43 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/js-function-exec-time/</guid>
      <description>为什么如下代码会打印 7 个 8 let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } i = 8 console.log(i)  上面代码的输出是7个8，实际上第一个8是最后一行代码打印出来的。
要理解为什么打印的不是“0, 1, 2, 3, 4, 5, 8”，需要了解JS的Event Loop（事件循环），可以看阮一峰的文章JavaScript 运行机制详解：再谈Event Loop。
 JavaScript是单线程引擎。 let i = 0，for循环，i = 8，console.log(i)是同步任务，在主线程的执行栈排队。 setTimeout是异步任务，主线程运行到setTimeout语句时，会在任务队列尾部添加事件。 等待主线程任务栈清空后，该事件才可能进入主线程运行（排在任务队列中第一位且计时时间已到时才会进入主线程执行）。 setTimeout执行时，i的值已经是8了。  让上面代码打印 8、0、1、2、3、4、5 的方法 1. for与let配合 for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } i = 8 console.log(i)   神奇之处是，JS引擎每次循环会多创建一个i，并将其保存。 每次循环中的i是不同的变量 循环里的每个i与i = 8的i也是不同的变量  2.</description>
    </item>
    
    <item>
      <title>JavaScript 对象基本用法</title>
      <link>http://yangpeiya.xyz/js-object/</link>
      <pubDate>Wed, 01 Jan 2020 22:01:25 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/js-object/</guid>
      <description>最新的 ECMAScript 标准定义了 8 种数据类型:
 7 种原始类型:  Boolean Null Undefined Number BigInt String Symbol  和 Object  除 Object 以外的所有类型都是不可变的（值本身无法被改变）。
创建Object实例的两种语法 let obj = {&#39;name&#39;:&#39;Peppa&#39;,&#39;age&#39;:3} let obj = new Object({&#39;name&#39;:&#39;Peppa&#39;,&#39;age&#39;:3})   对象是无序的数据集合 对象是键值对的集合，键名是属性名，键值是属性值 键名是字符串，不是标识符，可以包含任意字符 引号可省略，省略之后就只能写标识符 就算引号省略了，键名也还是字符串，JavaScript会将属性名自动变成字符串  1 -&amp;gt; &amp;lsquo;1&amp;rsquo; 3.2 -&amp;gt; &amp;lsquo;3.2&amp;rsquo; 1e2 -&amp;gt; &amp;lsquo;100&amp;rsquo; 1e-2 -&amp;gt; &amp;lsquo;0.01&amp;rsquo; .234 -&amp;gt; &amp;lsquo;0.234&amp;rsquo; 0xFF -&amp;gt; &amp;lsquo;255&amp;rsquo;   删除对象的属性 let obj = {xxx:&#39;yyy&#39;} //1. 删除属性的两种语法 delete obj.</description>
    </item>
    
    <item>
      <title>Javascript基本语法</title>
      <link>http://yangpeiya.xyz/javascript-grammar/</link>
      <pubDate>Wed, 01 Jan 2020 18:13:15 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/javascript-grammar/</guid>
      <description>表达式与语句 表达式  表达式（expression），指一个为了得到返回值的计算式 1+2是表达式，值为3 add(1,2)表达式的值为函数的返回值 console.log表达式的值为函数本身 console.log(3)表达式的值为undefined  语句  语句（statement）是为了完成某种任务而进行的操作 var a = 1 是一个语句  二者区别  表达式一般都有值，语句可能有，也可能没有 语句一般会改变环境（声明，赋值） 上面两句话并不是绝对的  变量  变量是用来存储数据的容器 变量需要声明，初始化后使用 由于JS引擎的“变量提升”机制，变量可以在声明之前进行初始化和使用。但是如果没有初始化，就不能使用它们（会返回undefined) 变量可以用var或let关键字来定义（也可能不使用关键字）  let命令是es6新增的 “变量提升”不适用于let let声明的变量只在所在的代码块有效   标识符  代码中用来标识变量、函数、或属性的字符序列 在JavaScript中，标识符只能包含Unicode字母或数字或下划线（“_”）或美元符号（“$”），且不能以数字开头  if else 语句 if (condition1){ statements1 }else if (condition2){ statements2 }else if (condition3){ statements3 }... else{ statementsN }  单行代码可以省略大括号，嵌套由缩进决定
while 语句 var n = 0; while (n &amp;lt; 3) { n++; console.</description>
    </item>
    
    <item>
      <title>JavaScript的历史</title>
      <link>http://yangpeiya.xyz/javascript/</link>
      <pubDate>Mon, 16 Dec 2019 19:51:52 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/javascript/</guid>
      <description>JavaScript诞生 1994年，网景公司（Netscape）发布了Navigator浏览器0.9版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。
网景决定发明一种与Java搭配使用的辅助脚本语言并且语法上有些类似。为了应付公司安排，Brendan Eich用10天时间就把Javascript原型设计出来了。他的设计思路如下：
 借鉴C语言的基本语法； 借鉴Java语言的数据类型和内存管理； 借鉴Scheme语言，将函数提升到&amp;rdquo;第一等公民&amp;rdquo;（first class）的地位； 借鉴Self语言，使用基于原型（prototype）的继承机制。  Javascript语言实际上是两种语言风格的混合产物&amp;mdash;-（简化的）函数式编程+（简化的）面向对象编程。
最初网景公司将其命名为Mocha，后又改名为LiveScript。网景公司与昇阳电脑公司组成的开发联盟为了让这门语言搭上Java这个编程语言“热词”，又将其改名为JavaScript。
标准化 为了取得技术优势，微软推出了JScript来迎战JavaScript的脚本语言。为了互用性，Ecma国际（前身为欧洲计算机制造商协会）创建了ECMA-262标准（ECMAScript）。两者都属于ECMAScript的实现。1996年11月，为了压制微软，网景正式向ECMA（欧洲计算机制造商协会）提交语言标准。1997年6月，ECMA以JavaScript语言为基础制定了ECMAScript标准规范ECMA-262。JavaScript成为了ECMAScript最著名的实现之一。除此之外，ActionScript和JScript也都是ECMAScript规范的实现语言。尽管JavaScript作为给非程序人员的脚本语言，而非作为给程序人员的脚本语言来推广和宣传，但是JavaScript具有非常丰富的特性。
JavaScript的设计缺陷 1. 不适合开发大型程序 Javascript没有名称空间（namespace），很难模块化；没有如何将代码分布在多个文件的规范；允许同名函数的重复定义，后面的定义可以覆盖前面的定义，很不利于模块化加载。
2. 非常小的标准库 Javascript提供的标准函数库非常小，只能完成一些基本操作，很多功能都不具备。
3. null和undefined null属于对象（object）的一种，意思是该对象为空；undefined则是一种数据类型，表示未定义。在编程实践中，null几乎没用，根本不应该设计它。
4. 全局变量难以控制 Javascript的全局变量，在所有模块中都是可见的；任何一个函数内部都可以生成全局变量，这大大加剧了程序的复杂性。
5. 自动插入行尾分号 Javascript的所有语句，都必须以分号结尾。但是，如果你忘记加分号，解释器并不报错，而是为你自动加上分号。有时候，这会导致一些难以发现的错误。
6. 加号运算符 +号作为运算符，有两个含义，可以表示数字与数字的和，也可以表示字符与字符的连接。如果一个操作项是字符，另一个操作项是数字，则数字自动转化为字符。这样的设计，不必要地加剧了运算的复杂性，完全可以另行设置一个字符连接的运算符。
7. NaN NaN是一种数字，表示超出了解释器的极限。它有一些很奇怪的特性。与其设计NaN，不如解释器直接报错，反而有利于简化程序。
8. 数组和对象的区分 由于Javascript的数组也属于对象（object），所以要区分一个对象到底是不是数组，相当麻烦。
9. == 和 === ==用来判断两个值是否相等。当两个值类型不同时，会发生自动转换，得到的结果非常不符合直觉。因此，推荐任何时候都使用&amp;rdquo;===&amp;ldquo;（精确判断）比较符。
10. 基本类型的包装对象 Javascript有三种基本数据类型：字符串、数字和布尔值。它们都有相应的建构函数，可以生成字符串对象、数字对象和布尔值对象。与基本数据类型对应的对象类型，作用很小，造成的混淆却很大。
参考 https://zh.wikipedia.org/wiki/JavaScript#%E5%8E%86%E5%8F%B2
https://baike.baidu.com/item/javascript#4
http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html
http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html</description>
    </item>
    
    <item>
      <title>浅析 URL</title>
      <link>http://yangpeiya.xyz/url/</link>
      <pubDate>Fri, 06 Dec 2019 21:07:25 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/url/</guid>
      <description>URL URL 全称 Uniform Resource Locator, 翻译过来是统一资源定位器。它被用来表示因特网上资源的地址。这里，资源可以是一个HTML页面，CSS文档，一副图像等。
URL的组成 下面是一些URL的例子
https://developer.mozilla.org https://developer.mozilla.org/en-US/docs/Learn/ https://developer.mozilla.org/en-US/search?q=URL https://developer.mozilla.org/en-US/search?q=URL#license  由上面的例子可以看出，一个URL由不同的部分组成，其中有些是必须的，有些是可选的
 协议 指定使用何种协议处理URL，如http(超文本传输), https(安全的超文本传输), ftp(文件传输), mailto(打开本地邮件客户端)。 域名/ip 它表明正在请求哪个Web服务器。上例中为developer.mozilla.org，也可以用ip地址代替域名 端口 它表明正在请求Web服务器上的哪个服务，若为默认值，则可以省略。端口号跟在域名后面，用:作为分隔符。 上面的例子中，使用https默认的端口号443，端口号被省略。常用协议端口号如下：  http 80 https 443 ftp 21  路径 如/en-US/docs/Learn/，它表明资源在网络服务器上的路径 参数 如？q=URL,q是参数名，URL是参数值。它是提供给网络服务器的额外参数。 锚点 如#license,license是锚点，它指向资源https://developer.mozilla.org/en-US/search?q=URL中id为license的元素位置。  nslookup 在命令行输入man nslookup可以查看nslookup的手册。 nslookup是一个用来查询互联网域名服务器的程序。
DNS 向域名发送请求时，浏览器要先将域名转换为ip地址，再向该ip地址发送请求，这个转换是通过DNS实现的。DNS全称Domain Name System，中文可翻译为域名系统， 它是互联网提供的一项服务。
nslookup的两种模式 nslookup有两种模式：交互模式和非交互模式。交互模式允许用户向域名服务器查询不同主机和域名的信息，或打印一个域名内的所有主机列表。非交互模式用于打印一个主机或一个域名的名字和查询信息。
交互模式可以通过以下方式进入:
 在命令行输入nslookup 在命令行输入nslookup - [域名服务器的主机名/ip地址]  非交互模式格式：
nslookup [-选项] &amp;lt;要查询的ip地址/名字&amp;gt; [域名服务器的主机名/ip地址]
 第一个参数必填 第二个参数可选  例子  本机DNS服务器是192.</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>http://yangpeiya.xyz/test/</link>
      <pubDate>Fri, 06 Dec 2019 20:58:25 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/test/</guid>
      <description>this is a test file</description>
    </item>
    
    <item>
      <title>CSS 知识总结</title>
      <link>http://yangpeiya.xyz/css-summary/</link>
      <pubDate>Sat, 30 Nov 2019 14:59:28 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/css-summary/</guid>
      <description>autoauto- 浏览器渲染原理auto - 浏览器渲染过程auto - 更新样式auto - 如何更新样式auto - 三种更新方式auto- CSS 动画的两种做法（transition 和 animaautoauto- 1. 浏览器渲染原理auto - 1.1. 浏览器渲染过程auto - 1.2. 更新样式auto - 1.2.1. 如何更新样式auto - 1.2.2. 三种更新方式auto- 2. CSS 动画的两种做法（transition 和 animation）auto - 2.1. Transition（过渡）auto - 2.1.1. 改变状态的方式auto - 2.1.2. 可以设置的过渡相关属性auto - 2.2. Animationauto - 2.2.1. 关键帧auto - 2.2.2. animation相关属性autoautotion）autoauto1. 浏览器渲染原理 渲染，简单说，就是浏览器将html，css，js源代码转化为用户可以看见的网页。
1.1. 浏览器渲染过程  根据HTML构建HTML树（DOM） 根据CSS构建CSS树（CSSOM） CSSOM 树和 DOM 树合并成渲染树（Render Tree）  渲染树只包含渲染网页所需的节点(可见节点)。  display:none元素从渲染树中完全移除 visibility:hidden仍占据着布局空间，被渲染成一个空框
  最终输出的渲染同时包含了屏幕上的所有可见内容及其样式信息。   布局计算每个对象的精确位置和大小。 绘制，将渲染树转换成屏幕上的实际像素。 合成，根据层叠关系展示画面  1.</description>
    </item>
    
    <item>
      <title>CSS盒模型</title>
      <link>http://yangpeiya.xyz/css-box/</link>
      <pubDate>Tue, 19 Nov 2019 23:39:22 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/css-box/</guid>
      <description>CSS 盒模型(Box Model) 两种 CSS 盒模型  content-box 内容盒（W3C 标准盒模型） border-box 边框盒（IE 盒模型） CSS 盒模型的设置  行内元素占用空间 margin 合并  会发生 margin 合并的情况 如何阻止合并   1. CSS 盒模型(Box Model) CSS 盒模型是对一个文档进行布局时，浏览器渲染元素的标准之一。它将所有的元素表示为一个个矩形的盒子。一个盒子由边距(margin)，边框(border)，填充(padding)和实际内容(content)组成，如下图所示：  内容区域 content area  容纳着元素的“真实”内容，如文本、图像或一个视频播放器。 它通常含有一个背景颜色（默认为透明）或背景图像。  填充区域 padding area  内容区域的扩展，负责延伸内容区域的背景，填充内容与边框之间的区域。  边框区域 border area  扩展自内边距区域，是容纳边框的区域。  边距区域 margin area  用空白区域扩展边框区域，以分开相邻的元素。   2. 两种 CSS 盒模型 根据 width 和 height 计算方式的不同，有下面两种常见的 CSS 盒模型。</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://yangpeiya.xyz/html-common-label/</link>
      <pubDate>Sat, 16 Nov 2019 14:14:46 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/html-common-label/</guid>
      <description>a标签的用法  作用 属性  img标签的用法  作用 属性 事件 响应式  table标签的用法  作用 相关的标签 相关的样式  可替换元素  1. a标签的用法 1.1. 作用 a(anchor) 元素可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。
1.2. 属性  href(hyper reference)  包含超链接指向的 URL 或 URL 片段。 取值： 网址  https://google.com http://google.com //google.com  路径  /a/b/c 以及 a/b/c index.html 以及./index.html  伪协议  javascript:代码; 点击会执行代码 &amp;lt;a href=&amp;quot;javascript:;&amp;quot;&amp;gt;查看&amp;lt;/a&amp;gt;  上面的链接点击以后不会发生任何事情，不会刷新，也不会跳转到页面顶部。某些特殊情况下适用。  mailto:邮箱 tel:手机号  id  href=#xxx 跳转到id位xxx的元素   target  该属性指定在何处显示链接的资源。 取值： 程序员的命名  标签（tab），窗口（window），或框架（iframe）等浏览上下文的名称。 内置名字 _self: 当前页面加载。（默认值） _blank: 新窗口打开 _parent: 层叠页面上一层页面 _top: 层叠页面最外层页面   download  此属性指示浏览器下载 URL 而不是导航到它，因此将提示用户将其保存为本地文件。 如果属性有一个值，那么此值将在下载保存过程中作为预填充的文件名（如果用户需要，仍然可以更改文件名）。 此属性对允许的值没有限制，但是 / 和 \ 会被转换为下划线。大多数文件系统限制了文件名中的标点符号，故此，浏览器将相应地调整建议的文件名。 问题： 不是所有浏览器都支持，尤其是手机浏览器可能不支持。   2.</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>http://yangpeiya.xyz/html1/</link>
      <pubDate>Fri, 15 Nov 2019 22:22:21 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/html1/</guid>
      <description>html起源 html起手式 html章节标签 html全局属性 html常用的内容标签  HTML(HyperText Markup Language, 超文本标记语言)是一种用于创建网页的标准标记语言。HTML元素是构建网站的基石。HTML允许嵌入图像与对象，并且可以用于创建交互式表单，它被用来结构化信息——例如标题、段落和列表等等，也可用来在一定程度上描述文档的外观和语义。
1. html起源 Tim Berners-Lee 在工作时，感觉同事之间共享文档太麻烦，需要拿着硬盘将文档从一个电脑拷贝到另一个电脑。于是他想，能不能通过互联网来共享文档。HTML就是基于这么一个初衷的产物。Tim Berners-Lee规定HTML并在1990年底写出浏览器和服务器软件。HTML格式的文件，可以被浏览器读取，并渲染成可视化网页。
2. html起手式 vscode安装Emmet插件后，可以自动生成html5模板，模板如下：
&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;!-- 文档类型为html --&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&amp;lt;!-- lang定义了元素的语言，可以改为zh-cn，表示中文 --&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;!-- 字符编码方式，utf-8可以表示所有语言 --&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;!-- 定义手机浏览器展示页面的窗口。网页宽度默认等于屏幕宽度（width=device-width），原始缩放比例（initial-scale=1）为1.0，即网页初始大小占屏幕面积的100%。 --&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;!-- 告诉IE使用最新内核渲染 --&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;!-- 标题，会在浏览器tab上显示 --&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  3. html章节标签  标题 h1-h6 章节 section 文章 article 段落 p 头部 header 脚部 footer 主要内容 main 旁支内容 aside 划分 div  4.</description>
    </item>
    
    <item>
      <title>Hugo搭建个人博客</title>
      <link>http://yangpeiya.xyz/hugo-blog/</link>
      <pubDate>Wed, 06 Nov 2019 18:15:36 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/hugo-blog/</guid>
      <description>Hugo官方教程
1. 安装Hugo 不同操作系统上的安装教程
以Windows为例
1.1. 下载Hugo release  进入Hugo release页面 下载与系统对应版本  解压，把hugo.exe放到&amp;hellip;\hugo目录下
 &amp;hellip;为任意本地路径，建议全英文，不要有空格 以D:\Software\hugo\hugo.exe为例
   1.2. 配置环境变量 右击开始 &amp;gt; 系统 &amp;gt; 高级系统设置 &amp;gt; 环境变量 &amp;gt; 系统变量 &amp;gt; 选中Path &amp;gt; 编辑 &amp;gt; 新建 &amp;gt; 填入 D:\Software\hugo (你的hugo.exe所在路径) 1.3. 检查hugo是否成功安装 重启终端，运行hugo version查看版本 2. 创建站点 hugo new site blog  在终端进入你想要存放本地站点的路径，运行上述指令，在当前路径创建blog目录，存放本地站点。
3. 添加主题 可以在hugo官网上挑选心仪的主题， 以LeaveIt为例
 下载主题
进入&amp;hellip;/blog目录，输入以下指令
cd themes git clone https://github.com/liuzc/LeaveIt.git  设置主题
打开blog目录下的config.toml文件，根据官方示例配置你的config.toml
  4.</description>
    </item>
    
    <item>
      <title>First</title>
      <link>http://yangpeiya.xyz/first/</link>
      <pubDate>Fri, 01 Nov 2019 11:15:24 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/first/</guid>
      <description>  fruit  fruit  apple banana kiwi peach  </description>
    </item>
    
  </channel>
</rss>