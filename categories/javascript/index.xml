<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Polly-foz&#39;s Blog</title>
    <link>http://yangpeiya.xyz/categories/javascript/</link>
    <description>Recent content in JavaScript on Polly-foz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 21 Jan 2020 21:55:13 +0800</lastBuildDate>
    
	<atom:link href="http://yangpeiya.xyz/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>闭包</title>
      <link>http://yangpeiya.xyz/js-closure/</link>
      <pubDate>Tue, 21 Jan 2020 21:55:13 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/js-closure/</guid>
      <description>1. 闭包是什么 2. 闭包的用途 3. 闭包的缺点  1. 闭包是什么 维基百科对于 [闭包](https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6) 是这样描述的：
闭包是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。 ...... 在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。运行时，一旦外部的 函数被执行，一个闭包就形成了，闭包中包含了内部函数的代码，以及所需外部函数中的变量的引用。其中所引用的变量称作上值(upvalue)。  简而言之，闭包由函数及其引用的一组在函数外部的变量组成。被引用的变量会和这个函数共同存在。
function makeAdder(x) { return function(y) { return x + y; }; } var add5 = makeAdder(5); var add10 = makeAdder(10); console.log(add5(2)); // 7 console.log(add10(2)); // 12  上面的例子中，被赋值为5的x和add5是一个闭包，x是makeAdder的一个局部变量，add5是makeAdder返回的一个函数。makeAdder返回后，由于x还被一个闭包引用着，所以x没有被销毁。
同理，被赋值为10的x和add10也是一个闭包。
2. 闭包的用途 [闭包提供了许多与面向对象编程相关的好处 —— 特别是数据隐藏和封装。](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)
Java对象将一组属性和对属性的操作(方法)封装起来。当属性或方法被声明为私有(private)时，用户不能通过对象.属性名的方式直接获得该属性或方法，只能通过对象提供的方法来操作该属性或方法（当然，还有反射机制。。）。
JavaScript没有提供私有属性的语法。闭包可以用于模拟私有属性和方法。
var Counter = (function() { var privateCounter = 0; function changeBy(val) { privateCounter += val; } return { increment: function() { changeBy(1); }, decrement: function() { changeBy(-1); }, value: function() { return privateCounter; } } })(); console.</description>
    </item>
    
    <item>
      <title>JQuery设计思想</title>
      <link>http://yangpeiya.xyz/jquery/</link>
      <pubDate>Thu, 09 Jan 2020 16:29:50 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/jquery/</guid>
      <description>1. 选择网页元素 2. 改变结果集 3. 链式操作 4. 元素的操作  4.1. 取值和赋值 4.2. 移动 4.3. 复制，删除和创建  5. 工具方法  1. 选择网页元素 &amp;quot;选择某个网页元素，然后对其进行某种操作&amp;quot;是jQuery的基本设计思想和主要用法。使用jQuery的第一步，往往是将一个选择表达式放进构造函数jQuery()（简写为$()），然后得到匹配的一组元素。 详细用法见jQuery()。
$( &amp;quot;div.foo&amp;quot; ); // 选择class为foo的div元素 $( &amp;quot;div.foo&amp;quot; ).click(function() { $( &amp;quot;span&amp;quot;, this ).addClass( &amp;quot;bar&amp;quot; ); //选择class为foo的div元素中的span，并在点击class为foo的div元素时，为其中的span添加类bar //$( &amp;quot;span&amp;quot;, this )相当于$(this).find(&amp;quot;span&amp;quot;) //this是被点击的原生dom元素 });  传入jQuery的selector参数可以使用jQuery特有的表达式
2. 改变结果集 jQuery设计思想之二，就是提供各种强大的[过滤器](https://www.jquery123.com/category/traversing/filtering/)，对结果集进行筛选，缩小选择结果。
$(&#39;li&#39;).filter(&#39;:even&#39;).css(&#39;background-color&#39;, &#39;red&#39;); //给索引为偶数的li设置红色背景（记得:even 和 :odd使用基于0的索引）  有时候，我们需要从结果集出发，移动到附近的相关元素，jQuery也提供了在DOM树上的[移动方法](https://www.jquery123.com/category/traversing/tree-traversal/)。
3. 链式操作 jQuery设计思想之三，就是最终选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来。
$(&#39;div&#39;).find(&#39;h3&#39;).eq(2).html(&#39;Hello&#39;); //分解开来，即： $(&#39;div&#39;) //找到div元素 .find(&#39;h3&#39;) //选择其中的h3元素 .eq(2) //选择第3个h3元素 .</description>
    </item>
    
    <item>
      <title>常见排序算法的JavaScript实现</title>
      <link>http://yangpeiya.xyz/js-sort/</link>
      <pubDate>Sun, 05 Jan 2020 19:11:36 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/js-sort/</guid>
      <description>1. 选择排序 /* * 选择排序 * 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置， * 然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 * 以此类推，直到所有元素均排序完毕。 */ // min ： 查找并返回数组中最小元素的值和下标 // T(n) = O(n), S(n) = O(1) let reducer = (currentMin,currentValue,currentIndex) =&amp;gt; currentMin[0] &amp;lt; currentValue ? currentMin : [currentValue,currentIndex] let min = (arr) =&amp;gt; arr.reduce(reducer,[Infinity,-1]) // 循环实现 // T(n) = O(n**2) S(n) = O(1) let selection_sort_loop = (arr)=&amp;gt;{ for(let i = 0; i &amp;lt; arr.length; i++){ let minValue = Infinity let minIndex = -1 for(let j = i; j &amp;lt; arr.</description>
    </item>
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>http://yangpeiya.xyz/js-function-exec-time/</link>
      <pubDate>Fri, 03 Jan 2020 14:20:43 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/js-function-exec-time/</guid>
      <description>为什么如下代码会打印 7 个 8 let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } i = 8 console.log(i)  上面代码的输出是7个8，实际上第一个8是最后一行代码打印出来的。
要理解为什么打印的不是“0, 1, 2, 3, 4, 5, 8”，需要了解JS的Event Loop（事件循环），可以看阮一峰的文章JavaScript 运行机制详解：再谈Event Loop。
 JavaScript是单线程引擎。 let i = 0，for循环，i = 8，console.log(i)是同步任务，在主线程的执行栈排队。 setTimeout是异步任务，主线程运行到setTimeout语句时，会在任务队列尾部添加事件。 等待主线程任务栈清空后，该事件才可能进入主线程运行（排在任务队列中第一位且计时时间已到时才会进入主线程执行）。 setTimeout执行时，i的值已经是8了。  让上面代码打印 8、0、1、2、3、4、5 的方法 1. for与let配合 for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } i = 8 console.log(i)   神奇之处是，JS引擎每次循环会多创建一个i，并将其保存。 每次循环中的i是不同的变量 循环里的每个i与i = 8的i也是不同的变量  2.</description>
    </item>
    
    <item>
      <title>JavaScript 对象基本用法</title>
      <link>http://yangpeiya.xyz/js-object/</link>
      <pubDate>Wed, 01 Jan 2020 22:01:25 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/js-object/</guid>
      <description>最新的 ECMAScript 标准定义了 8 种数据类型:
 7 种原始类型:  Boolean Null Undefined Number BigInt String Symbol  和 Object  除 Object 以外的所有类型都是不可变的（值本身无法被改变）。
创建Object实例的两种语法 let obj = {&#39;name&#39;:&#39;Peppa&#39;,&#39;age&#39;:3} let obj = new Object({&#39;name&#39;:&#39;Peppa&#39;,&#39;age&#39;:3})   对象是无序的数据集合 对象是键值对的集合，键名是属性名，键值是属性值 键名是字符串，不是标识符，可以包含任意字符 引号可省略，省略之后就只能写标识符 就算引号省略了，键名也还是字符串，JavaScript会将属性名自动变成字符串  1 -&amp;gt; &amp;lsquo;1&amp;rsquo; 3.2 -&amp;gt; &amp;lsquo;3.2&amp;rsquo; 1e2 -&amp;gt; &amp;lsquo;100&amp;rsquo; 1e-2 -&amp;gt; &amp;lsquo;0.01&amp;rsquo; .234 -&amp;gt; &amp;lsquo;0.234&amp;rsquo; 0xFF -&amp;gt; &amp;lsquo;255&amp;rsquo;   删除对象的属性 let obj = {xxx:&#39;yyy&#39;} //1. 删除属性的两种语法 delete obj.</description>
    </item>
    
    <item>
      <title>Javascript基本语法</title>
      <link>http://yangpeiya.xyz/javascript-grammar/</link>
      <pubDate>Wed, 01 Jan 2020 18:13:15 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/javascript-grammar/</guid>
      <description>表达式与语句 表达式  表达式（expression），指一个为了得到返回值的计算式 1+2是表达式，值为3 add(1,2)表达式的值为函数的返回值 console.log表达式的值为函数本身 console.log(3)表达式的值为undefined  语句  语句（statement）是为了完成某种任务而进行的操作 var a = 1 是一个语句  二者区别  表达式一般都有值，语句可能有，也可能没有 语句一般会改变环境（声明，赋值） 上面两句话并不是绝对的  变量  变量是用来存储数据的容器 变量需要声明，初始化后使用 由于JS引擎的“变量提升”机制，变量可以在声明之前进行初始化和使用。但是如果没有初始化，就不能使用它们（会返回undefined) 变量可以用var或let关键字来定义（也可能不使用关键字）  let命令是es6新增的 “变量提升”不适用于let let声明的变量只在所在的代码块有效   标识符  代码中用来标识变量、函数、或属性的字符序列 在JavaScript中，标识符只能包含Unicode字母或数字或下划线（“_”）或美元符号（“$”），且不能以数字开头  if else 语句 if (condition1){ statements1 }else if (condition2){ statements2 }else if (condition3){ statements3 }... else{ statementsN }  单行代码可以省略大括号，嵌套由缩进决定
while 语句 var n = 0; while (n &amp;lt; 3) { n++; console.</description>
    </item>
    
  </channel>
</rss>