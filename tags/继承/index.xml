<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>继承 on Polly-foz&#39;s Blog</title>
    <link>http://yangpeiya.xyz/tags/%E7%BB%A7%E6%89%BF/</link>
    <description>Recent content in 继承 on Polly-foz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 27 Jan 2020 17:34:37 +0800</lastBuildDate>
    
	<atom:link href="http://yangpeiya.xyz/tags/%E7%BB%A7%E6%89%BF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript 继承</title>
      <link>http://yangpeiya.xyz/js-inherit/</link>
      <pubDate>Mon, 27 Jan 2020 17:34:37 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/js-inherit/</guid>
      <description>继承是面向对象软件技术当中的一个概念，与多态、封装共为面向对象的三个基本特征。继承可以使得子类具有父类的属性和方法或者重新定义、追加属性和方法等。
基于class的继承 学过Java之类的面向对象编程语言的程序员们可以轻松的理解下面的代码。
class Point { static getInfo() { return &#39;This class creates 2-dimension points&#39;; } constructor(x, y) { this.x = x; this.y = y; } toString() { return this.x + &#39; &#39; + this.y } } class ColorPoint extends Point { static getInfo() { return super.getInfo() + &#39; with color&#39; } constructor(x, y, color) { // this.color = color; // ReferenceError super(x, y); this.color = color; // 正确 } toString() { return this.</description>
    </item>
    
  </channel>
</rss>