<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>函数 on Polly-foz&#39;s Blog</title>
    <link>http://yangpeiya.xyz/tags/%E5%87%BD%E6%95%B0/</link>
    <description>Recent content in 函数 on Polly-foz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 03 Jan 2020 14:20:43 +0800</lastBuildDate>
    
	<atom:link href="http://yangpeiya.xyz/tags/%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>http://yangpeiya.xyz/js-function-exec-time/</link>
      <pubDate>Fri, 03 Jan 2020 14:20:43 +0800</pubDate>
      
      <guid>http://yangpeiya.xyz/js-function-exec-time/</guid>
      <description>为什么如下代码会打印 7 个 8 let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } i = 8 console.log(i)  上面代码的输出是7个8，实际上第一个8是最后一行代码打印出来的。
要理解为什么打印的不是“0, 1, 2, 3, 4, 5, 8”，需要了解JS的Event Loop（事件循环），可以看阮一峰的文章JavaScript 运行机制详解：再谈Event Loop。
 JavaScript是单线程引擎。 let i = 0，for循环，i = 8，console.log(i)是同步任务，在主线程的执行栈排队。 setTimeout是异步任务，主线程运行到setTimeout语句时，会在任务队列尾部添加事件。 等待主线程任务栈清空后，该事件才可能进入主线程运行（排在任务队列中第一位且计时时间已到时才会进入主线程执行）。 setTimeout执行时，i的值已经是8了。  让上面代码打印 8、0、1、2、3、4、5 的方法 1. for与let配合 for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } i = 8 console.log(i)   神奇之处是，JS引擎每次循环会多创建一个i，并将其保存。 每次循环中的i是不同的变量 循环里的每个i与i = 8的i也是不同的变量  2.</description>
    </item>
    
  </channel>
</rss>